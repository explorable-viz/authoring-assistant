let getByX x table = fromSome (findWithKey "x" x table);

let referToBar bar = "the bar representing scenario " ++ bar.x ++ " has a z value of " ++ (numToStr (head bar.bars).z);

let stackedBarHeight stackedBar = sum [ bar.z | bar <- stackedBar.bars ];

let getTotal (BarChart record) = fromSome (findWithKey "x" "Total" record.stackedBars);
let getCO2 (BarChart record)= fromSome (findWithKey "x" "CO2" record.stackedBars);
let getNonCO2 (BarChart record) = fromSome (findWithKey "x" "Non-CO2" record.stackedBars);

<<<<<<< HEAD
=======
let aggregateSSP data period = [ x.changed | x <- data, x.period == period];

>>>>>>> main
let barHeight (BarChart bc) x =
    let bar = fromSome (findWithKey "x" x bc.stackedBars)
    in sum [ segment.z | segment <- bar.bars ];

<<<<<<< HEAD
let explainBars bars x = ("°C; " ++ x ++ " bar", bars);

let mkBarChart caption table = 
    BarChart {
        caption: caption,
        size: { width: 275, height: 185 },
        stackedBars: table
    };

let reshapeWarming table = map (fun record -> { x: record.type, bars: [ { y: "emissions", z: record.emissions } ]}) table;

let reshapePreds data bins width = zipWith (fun d b -> { x: b, bars: [ {y: "predicted", z: length d / width} ]}) data bins;

let getHeight bar offset = (head bar.bars).z + offset;

let ssp126late = [ record.changed | record <- ssp126Source];
    (ssp126distrib, width) = cut ssp126late 8;
    ssp126 = mkBarChart "SSP1-2.6" (reshapeWarming ssp126Breakdown);
    ssp245 = mkBarChart "SSP2-4.5" (reshapeWarming ssp245Breakdown);
    totalBars = map getTotal [ssp126, ssp245];
    co2 = map getCO2 [ssp126, ssp245];
    nonco2 = map getNonCO2 [ssp126, ssp245]
in MultiView {
    predictionHistogram: mkBarChart "SSP1-2.6 Predictions" (reshapePreds ssp126distrib (map numToStr [1 .. 8]) width),
    ssp126barchart: ssp126,
    ssp245barchart: ssp245,
    explanation:
        LinkedText [ "Within each scenario bar plot, the bars represent: total warming (", fst (explainBars totalBars "Total"),
                     "), warming contributions from CO2 ", fst (explainBars co2 "CO2")
                     , " and from non-CO2 GHG's ", fst (explainBars nonco2 "Non-CO2")
                     , ". Under SSP1-2.6, the mean predicted temperature increase by the end of the 21st century is "
                     , numToStr (sum ssp126late / length ssp126late)
                     , " and the median prediction is ", numToStr (findPercentile 50 ssp126late)]    
=======
let explainBars bars x = 
    if length bars == length (filter (fun bar -> bar.x == x) bars)
    then "(°C; " ++ x ++ " bar)"
    else error "absurd";

let mkBarChart scenName table = 
    BarChart {
        caption: "Example bar chart for scenario " ++ scenName,
        size: { width: 275, height: 185 },
        stackedBars: map (fun record -> { x: record.type, bars: [ { y: "emissions", z: record.emissions } ]}) table
    };

let getHeight bar offset = (head bar.bars).z + offset;

let ssp126late = aggregateSSP ssp126Source "2081-2100";
    ssp126 = mkBarChart "SSP1-2.6" ssp126Breakdown;
    ssp245 = mkBarChart "SSP2-4.5" ssp245Breakdown;
    total = map getTotal [ssp126, ssp245];
    co2 = map getCO2 [ssp126, ssp245];
    nonco2 = map getNonCO2 [ssp126, ssp245];
    meanTotal = (sum (map stackedBarHeight total)) / (length total)
in MultiView {
    explanation:
        LinkedText [ "Within each scenario bar plot, the bars represent: total warming ", explainBars total "Total",
                     ", warming contributions from CO2 ", explainBars co2 "CO2", " and from non-CO2 GHG's ", explainBars nonco2 "Non-CO2"
                     , ". Under SSP1-2.6, the mean predicted temperature increase by the end of the 21st century is ", numToStr (sum ssp126late / length ssp126late)]
>>>>>>> main
}
