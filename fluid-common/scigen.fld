let ordinalMap = [
    { lastDigit: 1, suffix: "st" },
    { lastDigit: 2, suffix: "nd" },
    { lastDigit: 3, suffix: "rd" }
];

let ordinal n =
   if n <= 0 then error "n <= 0 not supported"
   else if (n < 4) then
      numToStr n ++ (findWithKey_ "lastDigit" n ordinalMap).suffix
   else if (n >= 4) `and` (n <= 20) then numToStr n ++ "th"
   else error "n > 20 not supported";

let rankLabel word n =
   (if n == 1 then "" else ordinal n ++ "-") ++ word;

let trendWord n1 n2 compareWord =
    compareWord (compare n1 n2);

let growShrink EQ = "unchanging";
    growShrink LT = "shrinking";
    growShrink GT = "growing";

let smallerHigher EQ = "equal";
    smallerHigher LT = "smaller";
    smallerHigher GT = "larger";

let improve EQ = "does not further improve";
    improve LT = "does not further improve";
    improve GT = "further improves";

let improved EQ = "equal";
    improved LT = "not improved";
    improved GT = "improved";

let improvements EQ = "no further improvements";
    improvements LT = "no further improvements";
    improvements GT = "further improvements";

let shorterLonger EQ = "equal";
    shorterLonger LT = "shorter";
    shorterLonger GT = "longer";

let betterWorse EQ = "equal";
    betterWorse LT = "worse";
    betterWorse GT = "better";

let underOverPerforming EQ = "performing the same as";
    underOverPerforming LT = "performing worse than";
    underOverPerforming GT = "outperforming";
