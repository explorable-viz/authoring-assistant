let insert x sorted =
   let helper [] = [x];
       helper (y: ys) =
           if x.time_s < y.time_s
           then x : (y: ys)
           else y : helper ys
   in helper sorted;
let insertion_sort lst =
   let helper [] sorted = sorted;
       helper (x: xs) sorted = helper xs (insert x sorted)
   in helper lst [];
let get_rank model_name td =
   let sorted = insertion_sort td;
   let helper [] rank = -1;
       helper (x: xs) rank =
           if x.model == model_name
           then rank
           else helper xs (rank + 1)
   in helper sorted 1;

let ordinalMap = [
    { lastDigit: 1, suffix: "st" },
    { lastDigit: 2, suffix: "nd" },
    { lastDigit: 3, suffix: "rd" },
    { lastDigit: 4, suffix: "th" }
];

let ordinal n =
   if (n >= 10) `and` (n <= 20)
      then "th"
   else
      let last = n `mod` 10;
      let helper [] = "th";
          helper (x: xs) =
              if x.lastDigit == last then x.suffix else helper xs
      in helper ordinalMap;

let rankLabel word n =
   if n == 1
      then word
   else
      ordinal n ++ "-" ++ word;
