let getByX x table = fromSome (getByField "x" x table);
let referToBar bar = "the bar representing scenario " ++ bar.x ++ " has a z value of " ++ (numToStr (head bar.bars).z);
let probAsText = likelihoodMap likelihoods;
let stackedBarHeight stackedBar = sum [ bar.z | bar <- stackedBar.bars ];

let getTotal stackedBars = fromSome (getByField "x" "Total" stackedBars);
let getCO2 stackedBars = fromSome (getByField "x" "CO2" stackedBars);
let getNonCO2 stackedBars = fromSome (getByField "x" "Non-CO2" stackedBars);


let explainBars bars x = 
    if length bars == length (filter (fun bar -> bar.x == x) bars)
    then "($^\circ$C; " ++ x ++ " bar)"
    else error "absurd";

let mkBarChart scenName table = 
    BarChart {
        caption: "Example bar chart for scenario " ++ scenName,
        size: { width: 275, height: 185 },
        stackedBars: table
    };

let getHeight bar offset = (head bar.bars).z + offset;

let total = map getTotal [ssp119, ssp245];
    co2 = map getCO2 [ssp119, ssp245];
    nonco2 = map getNonCO2 [ssp119, ssp245];
    meanTotal = (sum (map stackedBarHeight total)) / (length total)
in MultiView {
    leftBarChart: mkBarChart "SSP1-1.9" ssp119,
    rightBarChart: mkBarChart "SSP2-4.5" ssp245,
    explanation:
        LinkedText [ "Within each scenario bar plot, the bars represent: total warming ", explainBars total "Total",
                     ", warming contributions from CO2 ", explainBars co2 "CO2", " and from non-CO2 GHG's ", explainBars nonco2 "Non-CO2"]
}
