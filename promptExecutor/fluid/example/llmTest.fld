let d = [
    { scenario: "SSP3-7.0", bestEst2140: 1.5, low2140: 1.2, high2140: 1.7, bestEst4160: 1.6, low4160: 1.2, high4160: 2.0, bestEst81100: 1.4, low81100: 1.0, high81100: 1.8},
    { scenario: "SSP1-1.9", bestEst2140: 1.4, low2140: 1.2, high2140: 1.8, bestEst4160: 2.0, low4160: 1.6, high4160: 2.5, bestEst81100: 2.7, low81100: 2.1, high81100: 3.5}
];\n" +
            "let modelProbs = [\n" +
            "     { model: \"SSP1-1.9\", probability: 0.92 }\n" +
            "];\n" +
            "let newDataTable offset = map (fun s -> { scenario: s.scenario, bE2140: s.bestEst2140 + offset, low2140: s.low2140, high2140: s.high2140, bE4160: s.bestEst4160, low4160: s.low4160, high4160: s.high4160, bE81100: s.bestEst81100, low81100: s.low81100, high81100: s.high81100}) d;\n" +
            "let newModel offset = map (fun s -> { model: s.model, probability: s.probability + offset}) modelProbs;\n" +
            "\n" +
            "let getByScenario scenario data =\n" +
            "   let helper [] = [];\n" +
            "      helper (x: xs) =\n" +
            "            if x.scenario == scenario\n" +
            "            then x\n" +
            "            else helper xs\n" +
            "   in helper data;\n" +
            "let likelihoods = [\n" +
            "    { prob: 0.99, msg: \"virtually certain\" },\n" +
            "    { prob: 0.9, msg: \"very likely\"},\n" +
            "    { prob: 0.66, msg: \"likely\"},\n" +
            "    { prob: 0.33, msg: \"about as likely as not\"},\n" +
            "    { prob: 0.1, msg: \"unlikely\"},\n" +
            "    { prob: 0.01, msg: \"very unlikely\"},\n" +
            "    { prob: 0.0, msg: \"exceptionally unlikely\"}\n" +
            "];" +
            "let likelihoodMap prob =\n" +
            "    let go (x:xs) =\n" +
            "        if x.prob < prob\n" +
            "        then x.msg\n" +
            "        else go xs;\n" +
            "        go [] = \"not found\"\n" +
            "    in go likelihoods;\n" +
            "\n" +
            "let findLikelihood (min, max) target =\n" +
            "    if target > max\n" +
            "    then 0.0\n" +
            "    else if target < min\n" +
            "    then 1.0\n" +
            "    else (target - min)/(max - min);" +
            "let envDataTable = newDataTable 13;
    probMetric = newModel 0.35;
    earlyScenario = getByScenario "SSP3-7.0" envDataTable;
    lateScenario = getByScenario "SSP1-1.9" envDataTable\n" +
            "in __dummy response__\n
