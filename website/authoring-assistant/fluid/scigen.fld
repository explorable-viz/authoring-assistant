let insert cmp x sorted =
   let helper [] = [x];
       helper (y: ys) =
           if cmp x y
           then x : (y: ys)
           else y : helper ys
   in helper sorted;
let insertionSort cmp lst =
   let helper [] sorted = sorted;
       helper (x: xs) sorted = helper xs (insert cmp x sorted)
   in helper lst [];
let findIndex key name td =
   let helper [] rank = -1;
       helper (x: xs) rank =
           if x.[name] == key
           then rank
           else helper xs (rank + 1)
   in helper td 1;
let ordinalMap = [
    { lastDigit: 1, suffix: "st" },
    { lastDigit: 2, suffix: "nd" },
    { lastDigit: 3, suffix: "rd" },
    { lastDigit: 4, suffix: "th" }
];

let findAndGet fname fval table =
   fromSome (findWithKey fname fval table);

let ordinal n =
   if n <= 0 then
      error "n <= 0 not supported"
   else if (n < 4) then
      (findAndGet "lastDigit" n ordinalMap).suffix
   else if (n >= 4) `and` (n <= 20) then
      "th"
   else
      error "n > 20 not supported";


let rankLabel word n =
   if n == 1
      then word
   else
      ordinal n ++ "-" ++ word;

let cmpTime a b = a.time_s < b.time_s;

let findWhere pred table =
   fromSome (find pred table);

